# model.py (Version 10.0 - Normalization-Aware)
import math

def get_features(days, miles, receipts):
    """Calculates raw, unscaled features."""
    features = {}
    features['days'] = float(days)
    features['miles'] = float(miles)
    features['receipts'] = float(receipts)
    features['daily_miles'] = miles / days if days > 0 else 0
    features['daily_spend'] = receipts / days if days > 0 else 0
    features['days_sq'] = features['days'] ** 2
    features['miles_sq'] = features['miles'] ** 2
    features['receipts_sq'] = features['receipts'] ** 2
    features['miles_x_days'] = features['miles'] * features['days']
    features['receipts_x_days'] = features['receipts'] * features['days']
    features['is_long_trip'] = 1.0 if days >= 8 else 0.0
    features['is_short_trip'] = 1.0 if days <= 3 else 0.0
    features['is_5_day_trip'] = 1.0 if days == 5 else 0.0
    features['is_hyper_efficient'] = 1.0 if features['daily_miles'] > 400 else 0.0
    features['is_high_spend'] = 1.0 if features['daily_spend'] > 150 else 0.0
    features['has_small_receipts'] = 1.0 if 0 < receipts < 25 else 0.0
    features['bias'] = 1.0
    return features

def normalize_features(features, scaling_params):
    """Applies Min-Max scaling to a feature set."""
    normalized = {}
    for name, value in features.items():
        min_val = scaling_params[name]['min']
        max_val = scaling_params[name]['max']
        if (max_val - min_val) > 0:
            normalized[name] = (value - min_val) / (max_val - min_val)
        else:
            normalized[name] = 0 # Feature is constant, scale to 0
    return normalized

def predict(features, weights):
    """Calculates a prediction from a set of (already normalized) features."""
    prediction = 0.0
    for name, value in features.items():
        if name in weights:
            prediction += value * weights[name]
    return max(0, prediction)
if __name__ == "__main__":
    import sys
    # --- OPTIMIZED WEIGHTS AND SCALING PARAMS (Generated by trainer.py) ---
    weights = {
    "days": 1200.8191184000736,
    "miles": 703.3046115642371,
    "receipts": 2738.2193827273327,
    "daily_miles": -303.9382597198407,
    "daily_spend": 261.0391852935097,
    "days_sq": -417.22413947508034,
    "miles_sq": -58.162282450252036,
    "receipts_sq": -1708.4672790188406,
    "miles_x_days": -29.031333350238718,
    "receipts_x_days": -111.91888546410293,
    "is_long_trip": -137.29741496650135,
    "is_short_trip": -35.96108643122799,
    "is_5_day_trip": -22.857160193028786,
    "is_hyper_efficient": 16.928142593986873,
    "is_high_spend": -61.00222349454064,
    "has_small_receipts": 178.63761681436262,
    "bias": 0.0
}
    scaling_params = {
    "days": {
        "min": 1.0,
        "max": 14.0
    },
    "miles": {
        "min": 5.0,
        "max": 1317.07
    },
    "receipts": {
        "min": 1.42,
        "max": 2503.46
    },
    "daily_miles": {
        "min": 0.5,
        "max": 1166.0
    },
    "daily_spend": {
        "min": 0.47333333333333333,
        "max": 2452.85
    },
    "days_sq": {
        "min": 1.0,
        "max": 196.0
    },
    "miles_sq": {
        "min": 25.0,
        "max": 1734673.3849
    },
    "receipts_sq": {
        "min": 2.0164,
        "max": 6267311.9716
    },
    "miles_x_days": {
        "min": 9.0,
        "max": 16576.0
    },
    "receipts_x_days": {
        "min": 3.6,
        "max": 34960.24
    },
    "is_long_trip": {
        "min": 0.0,
        "max": 1.0
    },
    "is_short_trip": {
        "min": 0.0,
        "max": 1.0
    },
    "is_5_day_trip": {
        "min": 0.0,
        "max": 1.0
    },
    "is_hyper_efficient": {
        "min": 0.0,
        "max": 1.0
    },
    "is_high_spend": {
        "min": 0.0,
        "max": 1.0
    },
    "has_small_receipts": {
        "min": 0.0,
        "max": 1.0
    },
    "bias": {
        "min": 1.0,
        "max": 1.0
    }
}

    if len(sys.argv) != 4:
        sys.exit(1)
    try:
        duration = int(sys.argv[1])
        miles = float(sys.argv[2])
        receipts = float(sys.argv[3])

        # The final script must perform the same feature engineering AND normalization
        raw_features = get_features(duration, miles, receipts)
        normalized_features = normalize_features(raw_features, scaling_params)

        result = predict(normalized_features, weights)
        print(f"{result:.2f}")
    except Exception:
        print(0.0)
        sys.exit(0)
